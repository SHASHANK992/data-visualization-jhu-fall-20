abline(a = 0.5, b = 1)
abline(a = 0.5, b = 1)
abline(a = 0.5, b = -1)
plot(c(0,0,1,1),c(0,1,0,1))
abline(a = 0.5, b = -0.5)
abline(a = -0.5, b = 1)
abline(a = 0.5, b = 1)
abline(a = 0.5, b = -1)
cos(1)
cos(0)
cos(-1)
sin(pi / 2)
cos(pi / 2)
cos(0)
cos(pi)
cos(0)
sin(0)
sin(pi)
sin((3*pi)/2)
cos(0)
cos(pi/2)
sin(pi/2)
cos((5*pi)/4)
cos((5*pi)/3)
sin((5*pi)/3)
sqrt(3)/2
(2 * (0.5) - 1)^(1/3)
(2 * (0.1) - 1)^(1/3)
(2 * (0.1) - 1)
getwd
getwd()
setwd('C:\Users\qizhe\Desktop\JHU\spring_20\data_vis\final_project')
setwd("C:\Users\qizhe\Desktop\JHU\spring_20\data_vis\final_project")
setwd("C:\Users\qizhe\Desktop\JHU\spring_20\data_vis\final_project\")
setwd("C:/Users/qizhe/Desktop/JHU/spring_20/data_vis/final_project/")
getwd()
setwd("C:/Users/qizhe/Desktop/JHU/spring_20/data_vis/final_project/project_folder/R/visualization4")
py_df <- read.csv('python_melt.csv') # Load data from python
lag_df <- read.csv('lag_data.csv')
### Fig. 5
### Plot log cases with linear regression fit
subset_countries <- unique(lag_df$Country.Region) # country names
### The plog_log_cases function will plot the log number of cases
### against the days of cases. It will fit a line using linear regression
### and the plot will include Adj. R-squared, slope, and intercept.
plot_log_cases <- function(log_df = outside_china_log,
location_name = 'Outside China') {
# Fit model
# Reference: https://www.r-bloggers.com/that-damn-r-squared/
model_log_df <- lm(formula = log_confirmed~days, data = log_df)
adj_r_squared <- summary(model_log_df)$r.squared # adj. R-squared
intercept <- summary(model_log_df)$coefficients[1]
slope <- summary(model_log_df)$coefficients[2]
date_count <- 1:nrow(log_df)
# Plot data
plot(date_count, log_df$log_confirmed, # plot log of cases
type = 'l', ylab = 'log confirmed cases', xlab = 'Lag Days',
main = paste(location_name, 'Log Cases vs. Lag Days'),
sub = paste('Adj. R-squared:', round(adj_r_squared, 4)))
abline(model_log_df, col = 'blue', lty = 2)
return(c(slope, intercept))
}
### The log_plot_grid() function is a helper function to
### make the data loaded from python suitable for the
### variables in the plot_log_cases function. It also
### makes sure that the log cases with -Inf are changed
### to 0.
log_plot_grid <- function(df = lag_df, country_name) {
# Reference: https://stackoverflow.com/questions/7531868/how-to-rename-a-single-column-in-a-data-frame
names(df)[names(df) == 'Log.Confirmed.Cases'] <- 'log_confirmed'
names(df)[names(df) == 'Lag.Days'] <- 'days'
df$log_confirmed <- ifelse(df$log_confirmed < 0, 0, df$log_confirmed)
plot_log_cases(log_df = df, location_name = country_name)
}
par(mfrow = c(3,4)) # plot grid of log cases
for (i in subset_countries) {
ith_country <- lag_df[lag_df$Country.Region == i,]
log_plot_grid(df = ith_country, country_name = i)
}
par(mfrow = c(3,5)) # plot grid of log cases
for (i in subset_countries) {
ith_country <- lag_df[lag_df$Country.Region == i,]
log_plot_grid(df = ith_country, country_name = i)
}
dev.off()
### Fig. 6
par(mfrow = c(1,2))
china_lag <- lag_df[lag_df$Country.Region == 'China',]
log_plot_grid(df = china_lag, country_name = 'China')
# Use the code from plot_log_cases to plot a custom
# plot for China
china <- py_df[py_df$Country.Region == 'China',]
names(china)[names(china) == 'Log.Confirmed.Cases'] <- 'log_confirmed'
names(china)[names(china) == 'Days'] <- 'days'
location_name <- 'China'
log_df <- china[1:20,] # Subset first 20 days of cases
model_log_df <- lm(formula = log_confirmed~days, data = log_df)
adj_r_squared <- summary(model_log_df)$r.squared # adj. R-squared
intercept <- summary(model_log_df)$coefficients[1]
slope <- summary(model_log_df)$coefficients[2]
date_count <- 1:nrow(log_df)
# Plot data
plot(date_count, log_df$log_confirmed, # plot log of cases
type = 'l', ylab = 'log confirmed cases', xlab = 'Days of Cases',
main = paste(location_name, 'Log Cases vs. Days of Cases'),
sub = paste('Adj. R-squared:', round(adj_r_squared, 4)))
abline(model_log_df, col = 'blue', lty = 2)
setwd("C:/Users/qizhe/Desktop/JHU/spring_20/data_vis/final_project/project_folder/R/visualization5")
py_df <- read.csv('python_melt.csv') # Load data from python
lag_df <- read.csv('lag_data.csv')
subset_countries <- unique(lag_df$Country.Region) # country names
### Fig. 8
### The delta_confirmed() function takes in the number of
### daily confirmed cases from a country and calculates the
### change in number of cases along with the growth rate.
### The change in number of cases is the difference in
### cases between day i and day i-1. The growth rate is the
### change in cases on day i divided by change in cases on
### day i-1. When the growth is NaN, it defaults to 0.
delta_confirmed <- function(df_cases = us_sum$confirmed) {
N <- length(df_cases); change_matrix <- matrix(0, nrow = N)
growth_matrix <- matrix(0, nrow = N) # Initialize variables
for (i in 2:N) { # calculate change in cases
change_matrix[i] <- df_cases[i] - df_cases[i-1]
}
for (j in 3:(N-1)) { # calculate growth rate of cases
growth <- (change_matrix[j] / change_matrix[j-1])
if (is.nan(growth)) {
growth_matrix[j] <- 0
} else {
growth_matrix[j] <- growth
}
}
change_df <- data.frame(days = 1:N, # save to df
cases = df_cases,
delta_cases = change_matrix,
growth_cases = growth_matrix)
return(change_df)
}
country_list <- split(py_df, py_df$Country.Region) # split countries to list
# calculate the delta dataframes for each of the countries
delta_list <- lapply(country_list, function(x) {
delta_confirmed(df_cases = x$Confirmed.Cases)
})
### The growth_plot() function is to plot the growth rate
### which is a function of the change in number of cases per
### day. By taking deltaN_d / deltaN_(d-1) the growth is
### calculated. This function will plot this growth rate
### against the number of days of cases. Additionally, it
### will draw a horizontal line at 1 to show when it may
### soon hit the inflection point and taper off.
growth_plot <- function(df_growth = outside_china_delta, location = 'Outside-China') {
growth_capped <- ifelse(df_growth$growth_cases < 5,
ifelse(df_growth$growth_cases >= 0, df_growth$growth_cases, 0), 5)
N <- nrow(df_growth)
plot(1:N, growth_capped, pch = 19,
xlab = 'Days of Cases', ylab = 'Growth Rate',
main = paste(location, ': Growth Rate vs. Days of Cases'))#,
# sub = '(Growth capped at 5 for perspective purposes.)')
abline(h = 1); abline(h = 0)
segments(x0 = 1:N, y0 = 0, x1 = 1:N, y1 = growth_capped)
}
par(mfrow = c(3,5)) # plot the grid of growth factors
lapply(seq_along(delta_list), function(x) {
growth_plot(df_growth = delta_list[[x]], location = subset_countries[[x]])
inf_growth <- which((delta_list[[x]]$growth_cases == Inf))
sapply(inf_growth, function(y) {
abline(v = y, col = 'red')
})
})
dev.off()
# Below certain individual and group plots are created
# from the previous grid of plots.
### The group_plot function is used to plot an individual
### country from the previous grid of plots.
group_plot <- function(delta_df, country_name) {
growth_plot(df_growth = delta_df, location = country_name)
inf_growth <- which((delta_df$growth_cases == Inf))
sapply(inf_growth, function(y) {
abline(v = y, col = 'red')
})
}
country_order <- unique(py_df$Country.Region) # order of countries
# China
china_num <- which(country_order == 'China')
group_plot(delta_df = delta_list[[china_num]], country_name = 'China')
# Curvy countries
brazil_num <- which(country_order == 'Brazil')
canada_num <- which(country_order == 'Canada')
france_num <- which(country_order == 'France')
italy_num <- which(country_order == 'Italy')
spain_num <- which(country_order == 'Spain')
par(mfrow = c(3,2))
group_plot(delta_df = delta_list[[brazil_num]], country_name = 'Brazil')
group_plot(delta_df = delta_list[[canada_num]], country_name = 'Canada')
group_plot(delta_df = delta_list[[france_num]], country_name = 'France')
group_plot(delta_df = delta_list[[italy_num]], country_name = 'Italy')
group_plot(delta_df = delta_list[[spain_num]], country_name = 'Spain')
# Straight countries
germany_num <- which(country_order == 'Germany')
iran_num <- which(country_order == 'Iran')
russia_num <- which(country_order == 'Russia')
turkey_num <- which(country_order == 'Turkey')
uk_num <- which(country_order == 'United Kingdom')
us_num <- which(country_order == 'United States of America')
par(mfrow = c(3,2))
group_plot(delta_df = delta_list[[germany_num]], country_name = 'Germany')
group_plot(delta_df = delta_list[[iran_num]], country_name = 'Iran')
group_plot(delta_df = delta_list[[russia_num]], country_name = 'Russia')
group_plot(delta_df = delta_list[[turkey_num]], country_name = 'Turkey')
group_plot(delta_df = delta_list[[uk_num]], country_name = 'United Kingdom')
group_plot(delta_df = delta_list[[us_num]], country_name = 'United States of America')
dev.off()
setwd("C:/Users/qizhe/Desktop/JHU/spring_20/data_vis/final_project/project_folder/R/visualization6")
### Edit data from Python for sunburst
sunburst <- read.csv('sunburst.csv') # load sunburst data
sunburst_sub <- sunburst[,colnames(sunburst)[-4]] # remove ISO column
# NA the blank columns
sunburst_sub[sunburst_sub$Province.State == '',]['Province.State'] = 'other'
# set NA to country
# Reference: https://stackoverflow.com/questions/2851015/convert-data-frame-columns-from-factors-to-characters
sunburst_sub$Province.State <- as.character(sunburst_sub$Province.State,
stringsAsFactors=FALSE) # remove factors
for (i in 1:nrow(sunburst_sub)) { # set Na's to country names instead
if (is.na(sunburst_sub[i,1])) {
sunburst_sub[i,1] = as.character(sunburst_sub[i,2])
}
}
# Reference: https://stackoverflow.com/questions/14262741/combining-duplicated-rows-in-r-and-adding-new-column-containing-ids-of-duplicate
sunburst_final <- aggregate(sunburst_sub[3], sunburst_sub[-3], sum)
# replace double names in province/country with NaN
for (i in 1:nrow(sunburst_final)) {
if (sunburst_final[i,1] == sunburst_final[i,2]) {
sunburst_final[i,1] <- NaN
}
}
write.csv(sunburst_final, file = 'sunburst_edit.csv', row.names = FALSE)
py_df <- read.csv('python_melt.csv') # Load data from python
lag_df <- read.csv('lag_data.csv')
### Fig. 5
### Plot log cases with linear regression fit
subset_countries <- unique(lag_df$Country.Region) # country names
getwd()
setwd("C:/Users/qizhe/Desktop/JHU/spring_20/data_vis/final_project/project_folder/R/visualization4")
py_df <- read.csv('python_melt.csv') # Load data from python
lag_df <- read.csv('lag_data.csv')
### Fig. 5
### Plot log cases with linear regression fit
subset_countries <- unique(lag_df$Country.Region) # country names
### The plog_log_cases function will plot the log number of cases
### against the days of cases. It will fit a line using linear regression
### and the plot will include Adj. R-squared, slope, and intercept.
plot_log_cases <- function(log_df = outside_china_log,
location_name = 'Outside China') {
# Fit model
# Reference: https://www.r-bloggers.com/that-damn-r-squared/
model_log_df <- lm(formula = log_confirmed~days, data = log_df)
adj_r_squared <- summary(model_log_df)$r.squared # adj. R-squared
intercept <- summary(model_log_df)$coefficients[1]
slope <- summary(model_log_df)$coefficients[2]
date_count <- 1:nrow(log_df)
# Plot data
plot(date_count, log_df$log_confirmed, # plot log of cases
type = 'l', ylab = 'log confirmed cases', xlab = 'Lag Days',
main = paste(location_name, 'Log Cases vs. Lag Days'),
sub = paste('Adj. R-squared:', round(adj_r_squared, 4)))
abline(model_log_df, col = 'blue', lty = 2)
return(c(slope, intercept))
}
### The log_plot_grid() function is a helper function to
### make the data loaded from python suitable for the
### variables in the plot_log_cases function. It also
### makes sure that the log cases with -Inf are changed
### to 0.
log_plot_grid <- function(df = lag_df, country_name) {
# Reference: https://stackoverflow.com/questions/7531868/how-to-rename-a-single-column-in-a-data-frame
names(df)[names(df) == 'Log.Confirmed.Cases'] <- 'log_confirmed'
names(df)[names(df) == 'Lag.Days'] <- 'days'
df$log_confirmed <- ifelse(df$log_confirmed < 0, 0, df$log_confirmed)
plot_log_cases(log_df = df, location_name = country_name)
}
par(mfrow = c(3,5)) # plot grid of log cases
for (i in subset_countries) {
ith_country <- lag_df[lag_df$Country.Region == i,]
log_plot_grid(df = ith_country, country_name = i)
}
setwd("C:/Users/qizhe/Desktop/JHU/spring_20/data_vis/final_project/project_folder/R/visualization5")
dev.off()
py_df <- read.csv('python_melt.csv') # Load data from python
lag_df <- read.csv('lag_data.csv')
subset_countries <- unique(lag_df$Country.Region) # country names
### Fig. 8
### The delta_confirmed() function takes in the number of
### daily confirmed cases from a country and calculates the
### change in number of cases along with the growth rate.
### The change in number of cases is the difference in
### cases between day i and day i-1. The growth rate is the
### change in cases on day i divided by change in cases on
### day i-1. When the growth is NaN, it defaults to 0.
delta_confirmed <- function(df_cases = us_sum$confirmed) {
N <- length(df_cases); change_matrix <- matrix(0, nrow = N)
growth_matrix <- matrix(0, nrow = N) # Initialize variables
for (i in 2:N) { # calculate change in cases
change_matrix[i] <- df_cases[i] - df_cases[i-1]
}
for (j in 3:(N-1)) { # calculate growth rate of cases
growth <- (change_matrix[j] / change_matrix[j-1])
if (is.nan(growth)) {
growth_matrix[j] <- 0
} else {
growth_matrix[j] <- growth
}
}
change_df <- data.frame(days = 1:N, # save to df
cases = df_cases,
delta_cases = change_matrix,
growth_cases = growth_matrix)
return(change_df)
}
country_list <- split(py_df, py_df$Country.Region) # split countries to list
# calculate the delta dataframes for each of the countries
delta_list <- lapply(country_list, function(x) {
delta_confirmed(df_cases = x$Confirmed.Cases)
})
### The growth_plot() function is to plot the growth rate
### which is a function of the change in number of cases per
### day. By taking deltaN_d / deltaN_(d-1) the growth is
### calculated. This function will plot this growth rate
### against the number of days of cases. Additionally, it
### will draw a horizontal line at 1 to show when it may
### soon hit the inflection point and taper off.
growth_plot <- function(df_growth = outside_china_delta, location = 'Outside-China') {
growth_capped <- ifelse(df_growth$growth_cases < 5,
ifelse(df_growth$growth_cases >= 0, df_growth$growth_cases, 0), 5)
N <- nrow(df_growth)
plot(1:N, growth_capped, pch = 19,
xlab = 'Days of Cases', ylab = 'Growth Rate',
main = paste(location, ': Growth Rate vs. Days of Cases'))#,
# sub = '(Growth capped at 5 for perspective purposes.)')
abline(h = 1); abline(h = 0)
segments(x0 = 1:N, y0 = 0, x1 = 1:N, y1 = growth_capped)
}
par(mfrow = c(3,5)) # plot the grid of growth factors
lapply(seq_along(delta_list), function(x) {
growth_plot(df_growth = delta_list[[x]], location = subset_countries[[x]])
inf_growth <- which((delta_list[[x]]$growth_cases == Inf))
sapply(inf_growth, function(y) {
abline(v = y, col = 'red')
})
})
dev.off()
# Below certain individual and group plots are created
# from the previous grid of plots.
### The group_plot function is used to plot an individual
### country from the previous grid of plots.
group_plot <- function(delta_df, country_name) {
growth_plot(df_growth = delta_df, location = country_name)
inf_growth <- which((delta_df$growth_cases == Inf))
sapply(inf_growth, function(y) {
abline(v = y, col = 'red')
})
}
country_order <- unique(py_df$Country.Region) # order of countries
# China
china_num <- which(country_order == 'China')
group_plot(delta_df = delta_list[[china_num]], country_name = 'China')
# Curvy countries
belgium_num <- which(country_order == 'Belgium')
brazil_num <- which(country_order == 'Brazil')
canada_num <- which(country_order == 'Canada')
france_num <- which(country_order == 'France')
italy_num <- which(country_order == 'Italy')
peru_num <- which(country_order == 'Peru')
spain_num <- which(country_order == 'Spain')
us_num <- which(country_order == 'United States')
us_num
country_order
belgium_num <- which(country_order == 'Belgium')
brazil_num <- which(country_order == 'Brazil')
canada_num <- which(country_order == 'Canada')
france_num <- which(country_order == 'France')
italy_num <- which(country_order == 'Italy')
peru_num <- which(country_order == 'Peru')
spain_num <- which(country_order == 'Spain')
us_num <- which(country_order == 'United States of America')
group_plot(delta_df = delta_list[[belgium_num]], country_name = 'Belgium')
par(mfrow = c(3,2))
group_plot(delta_df = delta_list[[belgium_num]], country_name = 'Belgium')
group_plot(delta_df = delta_list[[brazil_num]], country_name = 'Brazil')
group_plot(delta_df = delta_list[[canada_num]], country_name = 'Canada')
group_plot(delta_df = delta_list[[france_num]], country_name = 'France')
group_plot(delta_df = delta_list[[italy_num]], country_name = 'Italy')
group_plot(delta_df = delta_list[[spain_num]], country_name = 'Spain')
# Straight countries
germany_num <- which(country_order == 'Germany')
iran_num <- which(country_order == 'Iran')
russia_num <- which(country_order == 'Russia')
turkey_num <- which(country_order == 'Turkey')
uk_num <- which(country_order == 'United Kingdom')
# us_num <- which(country_order == 'United States of America')
par(mfrow = c(3,2))
group_plot(delta_df = delta_list[[germany_num]], country_name = 'Germany')
group_plot(delta_df = delta_list[[iran_num]], country_name = 'Iran')
group_plot(delta_df = delta_list[[russia_num]], country_name = 'Russia')
group_plot(delta_df = delta_list[[turkey_num]], country_name = 'Turkey')
group_plot(delta_df = delta_list[[uk_num]], country_name = 'United Kingdom')
group_plot(delta_df = delta_list[[us_num]], country_name = 'United States of America')
country_order
# Curvy countries
curvy_countries <- c('Belgium', 'Brazil', 'Canada', 'France', 'Russia')
which(country_order == curvy_countries)
curvy_countries
sapply(curvy_countries, function(x) which(country_order == x)
)
curvy_index <- sapply(curvy_countries, function(x) which(country_order == x))
curvy_index
# belgium_num <- which(country_order == 'Belgium')
# brazil_num <- which(country_order == 'Brazil')
# canada_num <- which(country_order == 'Canada')
# france_num <- which(country_order == 'France')
# italy_num <- which(country_order == 'Italy')
# peru_num <- which(country_order == 'Peru')
# spain_num <- which(country_order == 'Spain')
par(mfrow = c(3,2))
group_plot(delta_df = delta_list[[curvy_index]], country_name = 'Belgium')
Vectorize(group_plot, vectorize.args = c("delta_df"))
length(curvy_index)
curvy_countries
for(i in 1:length(curvy_index)) {
group_plot(delta_df = delta_list[[i]], country_name = curvy_countries[i])
}
curvy_index
country_order[-curvy_index]
# Straight countries
straight_countries <- country_order[-curvy_index]
straight_countries
straight_countries[-1]
straight_countries <- straight_countries[-1] # ignore China
straight_index <- sapply(straight_countries, function(x) which(country_order == x))
straight_index
length(straight_index)
par(mfrow = c(3,3))
for(i in 1:length(straight_index)) {
group_plot(delta_df = delta_list[[i]], country_name = straight_countries[i])
}
country_order
total <- 1482631 + 1612876 + 684483 + 320686 + 65980 + 8493
total <- 1482631 + 1612876 + 684483 + 320686 + 65980 + 8493
total
(1482631 / total) * 100
(1612876 / total) * 100
(684483 / total) * 100
(320686 / total) * 100
(65980 / total) * 100
(8493 / total) * 100
total
(1482631 / total) * 100
(1612876 / total) * 100
(684483 / total) * 100
(320686 / total) * 100
(65980 / total) * 100
(8493 / total) * 100
par(mfrow = c(3,5)) # plot the grid of growth factors
lapply(seq_along(delta_list), function(x) {
growth_plot(df_growth = delta_list[[x]], location = subset_countries[[x]])
inf_growth <- which((delta_list[[x]]$growth_cases == Inf))
sapply(inf_growth, function(y) {
abline(v = y, col = 'red')
})
})
par(mfrow = c(3,3)) # plot the grid of growth factors
lapply(seq_along(delta_list), function(x) {
growth_plot(df_growth = delta_list[[x]], location = subset_countries[[x]])
inf_growth <- which((delta_list[[x]]$growth_cases == Inf))
sapply(inf_growth, function(y) {
abline(v = y, col = 'red')
})
})
# Positive trends
positive_trend <- c('China', 'France', 'Germany', 'Spain')
# Positive trends
positive_trend <- c('China', 'France', 'Germany', 'Spain')
positive_index <- sapply(positive_trend, function(x) which(country_order == x))
positive_index
# Positive trends
positive_trend <- c('China', 'France', 'Germany', 'Spain')
positive_index <- sapply(positive_trend, function(x) which(country_order == x))
par(mfrow = c(2,2))
for(i in 1:length(curvy_index)) {
group_plot(delta_df = delta_list[[i]], country_name = curvy_countries[i])
}
dev.off()
par(mfrow = c(2,2))
for(i in 1:length(curvy_index)) {
group_plot(delta_df = delta_list[[i]], country_name = positive_trend[i])
}
positive_index
par(mfrow = c(2,2))
for(i in 1:length(positive_index)) {
group_plot(delta_df = delta_list[[i]], country_name = positive_trend[i])
}
country_order[-positive_index]
negative_trend <- country_order[-positive_index]
negative_trend <- country_order[-positive_index]
negative_index <- sapply(negative_trend, function(x) which(country_order == x))
negative_index
negative_trend
par(mfrow = c(3,4))
for(i in 1:length(negative_index)) {
group_plot(delta_df = delta_list[[i]], country_name = negative_trend[i])
}
81 * 54
